{"version":3,"sources":["components/Button.jsx","ContactContext.js","components/ContactCard.jsx","components/ContactsList.jsx","components/Home.jsx","components/AddContact.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","className","ContactContext","createContext","ContactCard","contact","useContext","contacts","setContacts","name","email","onClick","newContacts","filter","con","id","ContactsList","useState","search","setSearch","filteredContacts","toLowerCase","indexOf","to","value","onChange","e","target","type","placeholder","map","Home","AddContact","setName","setEmail","history","useHistory","length","alert","newContact","console","log","push","contactArr","App","Provider","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2915418b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Button = () => {\n  return <button className=\"app-btn\"> + Add new contact</button>;\n};\n\nexport default Button;\n","import { createContext } from \"react\";\n\nexport const ContactContext = createContext([]);\n","import React, { useContext } from \"react\";\nimport { ContactContext } from \"../ContactContext\";\n\nconst ContactCard = ({ contact }) => {\n  const { contacts, setContacts } = useContext(ContactContext);\n\n  const handleContactDelete = () => {\n    let newContacts = contacts.filter((con) => con.id != contact.id);\n    setContacts(newContacts);\n  };\n\n  return (\n    <div className=\"contact-card-div\">\n      <div>\n        <h4 className=\"contact-name\">{contact.name}</h4>\n        <p className=\"contact-email\">{contact.email}</p>\n      </div>\n\n      <div>\n        <span onClick={handleContactDelete} className=\"card-btn\">\n          delete\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactCard;\n","import React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Button from \"./Button\";\nimport { ContactContext } from \"../ContactContext\";\nimport ContactCard from \"./ContactCard\";\n\nfunction ContactsList() {\n  const { contacts } = useContext(ContactContext);\n\n  const [search, setSearch] = useState(\"\");\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  let filteredContacts = contacts.filter((contact) => {\n    return contact.name.toLowerCase().indexOf(search.toLowerCase()) != -1;\n  });\n\n  return (\n    <>\n      <div className=\"head-div\">\n        <Link to=\"/add-contact\">\n          <Button />\n        </Link>\n        <input\n          value={search}\n          onChange={updateSearch}\n          className=\"search-input\"\n          type=\"search\"\n          placeholder=\"search contact\"\n        />\n      </div>\n      <div>\n        {filteredContacts.map((contact) => (\n          <ContactCard key={contact.id} contact={contact} />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default ContactsList;\n","import React from \"react\";\n\nimport ContactsList from \"./ContactsList\";\n\nfunction Home() {\n  return (\n    <div className=\"contact-list-div\">\n      <ContactsList />\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { ContactContext } from \"../ContactContext\";\n\nfunction AddContact() {\n  const { contacts, setContacts } = useContext(ContactContext);\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  let history = useHistory();\n\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    if (name === \"\" || email === \"\") {\n      alert(\"name or email can't be empty !\");\n      return;\n    }\n\n    if (contacts.filter((con) => con.email === email).length > 0) {\n      alert(\"contract alreay exists !\");\n      return;\n    }\n\n    let newContact = {\n      id: contacts.length + 1,\n      name,\n      email,\n    };\n    setContacts([newContact, ...contacts]);\n    console.log(newContact);\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <Link to=\"/\">\n        <button className=\"app-btn\"> Go back</button>\n      </Link>\n      <div className=\"inputs-div\">\n        <input\n          name=\"name\"\n          onChange={handleNameChange}\n          value={name}\n          placeholder=\"Name\"\n          type=\"text\"\n        />\n        <input\n          name=\"email\"\n          onChange={handleEmailChange}\n          value={email}\n          placeholder=\"Email\"\n          type=\"text\"\n        />\n      </div>\n\n      <button onClick={handleSubmit} className=\"app-btn\" type=\"submit\">\n        Add contact\n      </button>\n    </div>\n  );\n}\n\nexport default AddContact;\n","import \"./App.css\";\nimport Home from \"./components/Home\";\nimport AddContact from \"./components/AddContact\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { ContactContext } from \"./ContactContext\";\n\nconst contactArr = [\n  { id: 1, name: \"user1\", email: \"user1@gmail.com\" },\n  { id: 2, name: \"user2\", email: \"user2@gmail.com\" },\n  { id: 3, name: \"user3\", email: \"user3@gmail.com\" },\n  { id: 4, name: \"user4\", email: \"user4@gmail.com\" },\n  { id: 5, name: \"user5\", email: \"user5@gmail.com\" },\n  { id: 6, name: \"user6\", email: \"user6@gmail.com\" },\n  { id: 7, name: \"user7\", email: \"user7@gmail.com\" },\n];\n\nfunction App() {\n  const [contacts, setContacts] = useState(contactArr);\n\n  return (\n    <div className=\"App\">\n      <h1>Contacts Manager</h1>\n      <Router>\n        <Switch>\n          <ContactContext.Provider value={{ contacts, setContacts }}>\n            <Route path=\"/\" exact component={() => <Home />} />\n            <Route path=\"/add-contact\" component={() => <AddContact />} />\n          </ContactContext.Provider>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}